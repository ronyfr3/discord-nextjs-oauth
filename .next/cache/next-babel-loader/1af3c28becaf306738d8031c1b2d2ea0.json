{"ast":null,"code":"import Cookie from \"js-cookie\";\nimport * as conf from \"../settings\";\nimport axios from \"axios\";\n\nasync function exchangeToken(code) {\n  return await axios.post(\"https://discordapp.com/api/oauth2/token\", `code=${code}&grant_type=authorization_code&client_id=${conf.clientID}&client_secret=${conf.clientSecret}&redirect_uri=${conf.redirect_uri}&scope=guilds%20identify`, {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    }\n  }).then(res => {\n    return res.data;\n  }, error => {\n    if (error.response.status.toString() === \"400\") {\n      return error.response.status;\n    }\n  });\n}\n\nasync function refreshToken(refreshToken) {\n  const res = await axios.post(\"https://discordapp.com/api/oauth2/token\", `refresh_token=${refreshToken}&grant_type=refresh_token&client_id=${conf.clientID}&client_secret=${conf.clientSecret}&redirect_uri=${conf.redirect_uri}&scope=guilds%20identify`, {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    }\n  }).catch(console.error);\n  return res.data;\n}\n\nfunction saveTokens(token, refreshToken) {\n  Cookie.set(\"token\", token);\n  Cookie.set(\"refreshToken\", refreshToken);\n}\n\nfunction deleteTokens() {\n  Cookie.remove(\"token\");\n  Cookie.remove(\"refreshToken\");\n}\n\nfunction getTokensForBrowser() {\n  let token = Cookie.getJSON(\"token\");\n  let refreshToken = Cookie.getJSON(\"refreshToken\");\n  return {\n    token: token,\n    refreshToken: refreshToken\n  };\n}\n\nfunction getTokensForServer(req) {\n  if (req.headers.cookie) {\n    const cookieToken = req.headers.cookie.split(\";\").find(c => c.trim().startsWith(\"token=\"));\n    const cookieRefreshToken = req.headers.cookie.split(\";\").find(c => c.trim().startsWith(\"refreshToken=\"));\n    let token = typeof cookieToken === \"string\" && cookieToken.split(\"=\")[1];\n    let refreshToken = typeof cookieRefreshToken === \"string\" && cookieRefreshToken.split(\"=\")[1];\n    return {\n      token: token,\n      refreshToken: refreshToken\n    };\n  }\n}\n\nexport { exchangeToken, refreshToken, saveTokens, deleteTokens, getTokensForBrowser, getTokensForServer };","map":{"version":3,"sources":["C:/Users/user/Desktop/myapp/app/public/oauth.js"],"names":["Cookie","conf","axios","exchangeToken","code","post","clientID","clientSecret","redirect_uri","headers","then","res","data","error","response","status","toString","refreshToken","catch","console","saveTokens","token","set","deleteTokens","remove","getTokensForBrowser","getJSON","getTokensForServer","req","cookie","cookieToken","split","find","c","trim","startsWith","cookieRefreshToken"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAeC,aAAf,CAA6BC,IAA7B,EAAmC;AACjC,SAAO,MAAMF,KAAK,CACfG,IADU,CAET,yCAFS,EAGR,QAAOD,IAAK,4CAA2CH,IAAI,CAACK,QAAS,kBAAiBL,IAAI,CAACM,YAAa,iBAAgBN,IAAI,CAACO,YAAa,0BAHlI,EAIT;AAACC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAAV,GAJS,EAMVC,IANU,CAORC,GAAD,IAAS;AACP,WAAOA,GAAG,CAACC,IAAX;AACD,GATQ,EAURC,KAAD,IAAW;AACT,QAAIA,KAAK,CAACC,QAAN,CAAeC,MAAf,CAAsBC,QAAtB,OAAqC,KAAzC,EAAgD;AAC9C,aAAOH,KAAK,CAACC,QAAN,CAAeC,MAAtB;AACD;AACF,GAdQ,CAAb;AAgBD;;AAED,eAAeE,YAAf,CAA4BA,YAA5B,EAA0C;AACxC,QAAMN,GAAG,GAAG,MAAMT,KAAK,CACpBG,IADe,CAEd,yCAFc,EAGb,iBAAgBY,YAAa,uCAAsChB,IAAI,CAACK,QAAS,kBAAiBL,IAAI,CAACM,YAAa,iBAAgBN,IAAI,CAACO,YAAa,0BAHzI,EAId;AAACC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAAV,GAJc,EAMfS,KANe,CAMTC,OAAO,CAACN,KANC,CAAlB;AAOA,SAAOF,GAAG,CAACC,IAAX;AACD;;AAED,SAASQ,UAAT,CAAoBC,KAApB,EAA2BJ,YAA3B,EAAyC;AACvCjB,EAAAA,MAAM,CAACsB,GAAP,CAAW,OAAX,EAAoBD,KAApB;AACArB,EAAAA,MAAM,CAACsB,GAAP,CAAW,cAAX,EAA2BL,YAA3B;AACD;;AAED,SAASM,YAAT,GAAwB;AACtBvB,EAAAA,MAAM,CAACwB,MAAP,CAAc,OAAd;AACAxB,EAAAA,MAAM,CAACwB,MAAP,CAAc,cAAd;AACD;;AAED,SAASC,mBAAT,GAA+B;AAC7B,MAAIJ,KAAK,GAAGrB,MAAM,CAAC0B,OAAP,CAAe,OAAf,CAAZ;AACA,MAAIT,YAAY,GAAGjB,MAAM,CAAC0B,OAAP,CAAe,cAAf,CAAnB;AACA,SAAO;AACLL,IAAAA,KAAK,EAAEA,KADF;AAELJ,IAAAA,YAAY,EAAEA;AAFT,GAAP;AAID;;AAED,SAASU,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAIA,GAAG,CAACnB,OAAJ,CAAYoB,MAAhB,EAAwB;AACtB,UAAMC,WAAW,GAAGF,GAAG,CAACnB,OAAJ,CAAYoB,MAAZ,CACjBE,KADiB,CACX,GADW,EAEjBC,IAFiB,CAEXC,CAAD,IAAOA,CAAC,CAACC,IAAF,GAASC,UAAT,CAAoB,QAApB,CAFK,CAApB;AAGA,UAAMC,kBAAkB,GAAGR,GAAG,CAACnB,OAAJ,CAAYoB,MAAZ,CACxBE,KADwB,CAClB,GADkB,EAExBC,IAFwB,CAElBC,CAAD,IAAOA,CAAC,CAACC,IAAF,GAASC,UAAT,CAAoB,eAApB,CAFY,CAA3B;AAIA,QAAId,KAAK,GAAG,OAAOS,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,CAACC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA/C;AACA,QAAId,YAAY,GACd,OAAOmB,kBAAP,KAA8B,QAA9B,IAA0CA,kBAAkB,CAACL,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAD5C;AAGA,WAAO;AACLV,MAAAA,KAAK,EAAEA,KADF;AAELJ,MAAAA,YAAY,EAAEA;AAFT,KAAP;AAID;AACF;;AAED,SACEd,aADF,EAEEc,YAFF,EAGEG,UAHF,EAIEG,YAJF,EAKEE,mBALF,EAMEE,kBANF","sourcesContent":["import Cookie from \"js-cookie\"\r\nimport * as conf from \"../settings\"\r\nimport axios from \"axios\"\r\n\r\nasync function exchangeToken(code) {\r\n  return await axios\r\n    .post(\r\n      \"https://discordapp.com/api/oauth2/token\",\r\n      `code=${code}&grant_type=authorization_code&client_id=${conf.clientID}&client_secret=${conf.clientSecret}&redirect_uri=${conf.redirect_uri}&scope=guilds%20identify`,\r\n      {headers: {\"Content-Type\": \"application/x-www-form-urlencoded\"}}\r\n    )\r\n    .then(\r\n      (res) => {\r\n        return res.data\r\n      },\r\n      (error) => {\r\n        if (error.response.status.toString() === \"400\") {\r\n          return error.response.status\r\n        }\r\n      }\r\n    )\r\n}\r\n\r\nasync function refreshToken(refreshToken) {\r\n  const res = await axios\r\n    .post(\r\n      \"https://discordapp.com/api/oauth2/token\",\r\n      `refresh_token=${refreshToken}&grant_type=refresh_token&client_id=${conf.clientID}&client_secret=${conf.clientSecret}&redirect_uri=${conf.redirect_uri}&scope=guilds%20identify`,\r\n      {headers: {\"Content-Type\": \"application/x-www-form-urlencoded\"}}\r\n    )\r\n    .catch(console.error)\r\n  return res.data\r\n}\r\n\r\nfunction saveTokens(token, refreshToken) {\r\n  Cookie.set(\"token\", token)\r\n  Cookie.set(\"refreshToken\", refreshToken)\r\n}\r\n\r\nfunction deleteTokens() {\r\n  Cookie.remove(\"token\")\r\n  Cookie.remove(\"refreshToken\")\r\n}\r\n\r\nfunction getTokensForBrowser() {\r\n  let token = Cookie.getJSON(\"token\")\r\n  let refreshToken = Cookie.getJSON(\"refreshToken\")\r\n  return {\r\n    token: token,\r\n    refreshToken: refreshToken,\r\n  }\r\n}\r\n\r\nfunction getTokensForServer(req) {\r\n  if (req.headers.cookie) {\r\n    const cookieToken = req.headers.cookie\r\n      .split(\";\")\r\n      .find((c) => c.trim().startsWith(\"token=\"))\r\n    const cookieRefreshToken = req.headers.cookie\r\n      .split(\";\")\r\n      .find((c) => c.trim().startsWith(\"refreshToken=\"))\r\n\r\n    let token = typeof cookieToken === \"string\" && cookieToken.split(\"=\")[1]\r\n    let refreshToken =\r\n      typeof cookieRefreshToken === \"string\" && cookieRefreshToken.split(\"=\")[1]\r\n\r\n    return {\r\n      token: token,\r\n      refreshToken: refreshToken,\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  exchangeToken,\r\n  refreshToken,\r\n  saveTokens,\r\n  deleteTokens,\r\n  getTokensForBrowser,\r\n  getTokensForServer,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}