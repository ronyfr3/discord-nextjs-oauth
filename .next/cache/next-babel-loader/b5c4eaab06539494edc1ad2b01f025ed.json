{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Cookie from \"js-cookie\";\nimport * as conf from \"../settings\";\nimport axios from \"axios\";\n\nfunction exchangeToken(_x) {\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction _exchangeToken() {\n  _exchangeToken = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(code) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.post(\"https://discordapp.com/api/oauth2/token\", \"code=\".concat(code, \"&grant_type=authorization_code&client_id=\").concat(conf.clientID, \"&client_secret=\").concat(conf.clientSecret, \"&redirect_uri=\").concat(conf.redirect_uri, \"&scope=guilds%20identify\"), {\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              }\n            }).then(function (res) {\n              return res.data;\n            }, function (error) {\n              if (error.response.status.toString() === \"400\") {\n                return error.response.status;\n              }\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction refreshToken(_x2) {\n  return _refreshToken.apply(this, arguments);\n}\n\nfunction _refreshToken() {\n  _refreshToken = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(refreshToken) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.post(\"https://discordapp.com/api/oauth2/token\", \"refresh_token=\".concat(refreshToken, \"&grant_type=refresh_token&client_id=\").concat(conf.clientID, \"&client_secret=\").concat(conf.clientSecret, \"&redirect_uri=\").concat(conf.redirect_uri, \"&scope=guilds%20identify\"), {\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              }\n            })[\"catch\"](console.error);\n\n          case 2:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _refreshToken.apply(this, arguments);\n}\n\nfunction saveTokens(token, refreshToken) {\n  Cookie.set(\"token\", token);\n  Cookie.set(\"refreshToken\", refreshToken);\n}\n\nfunction deleteTokens() {\n  Cookie.remove(\"token\");\n  Cookie.remove(\"refreshToken\");\n}\n\nfunction getTokensForBrowser() {\n  var token = Cookie.getJSON(\"token\");\n  var refreshToken = Cookie.getJSON(\"refreshToken\");\n  return {\n    token: token,\n    refreshToken: refreshToken\n  };\n}\n\nfunction getTokensForServer(req) {\n  if (req.headers.cookie) {\n    var cookieToken = req.headers.cookie.split(\";\").find(function (c) {\n      return c.trim().startsWith(\"token=\");\n    });\n    var cookieRefreshToken = req.headers.cookie.split(\";\").find(function (c) {\n      return c.trim().startsWith(\"refreshToken=\");\n    });\n    var token = typeof cookieToken === \"string\" && cookieToken.split(\"=\")[1];\n\n    var _refreshToken2 = typeof cookieRefreshToken === \"string\" && cookieRefreshToken.split(\"=\")[1];\n\n    return {\n      token: token,\n      refreshToken: _refreshToken2\n    };\n  }\n}\n\nexport { exchangeToken, refreshToken, saveTokens, deleteTokens, getTokensForBrowser, getTokensForServer };","map":{"version":3,"sources":["C:/Users/user/Desktop/myapp/app/public/oauth.js"],"names":["Cookie","conf","axios","exchangeToken","code","post","clientID","clientSecret","redirect_uri","headers","then","res","data","error","response","status","toString","refreshToken","console","saveTokens","token","set","deleteTokens","remove","getTokensForBrowser","getJSON","getTokensForServer","req","cookie","cookieToken","split","find","c","trim","startsWith","cookieRefreshToken"],"mappings":"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","sourcesContent":["import Cookie from \"js-cookie\"\r\nimport * as conf from \"../settings\"\r\nimport axios from \"axios\"\r\n\r\nasync function exchangeToken(code) {\r\n  return await axios\r\n    .post(\r\n      \"https://discordapp.com/api/oauth2/token\",\r\n      `code=${code}&grant_type=authorization_code&client_id=${conf.clientID}&client_secret=${conf.clientSecret}&redirect_uri=${conf.redirect_uri}&scope=guilds%20identify`,\r\n      {headers: {\"Content-Type\": \"application/x-www-form-urlencoded\"}}\r\n    )\r\n    .then(\r\n      (res) => {\r\n        return res.data\r\n      },\r\n      (error) => {\r\n        if (error.response.status.toString() === \"400\") {\r\n          return error.response.status\r\n        }\r\n      }\r\n    )\r\n}\r\n\r\nasync function refreshToken(refreshToken) {\r\n  const res = await axios\r\n    .post(\r\n      \"https://discordapp.com/api/oauth2/token\",\r\n      `refresh_token=${refreshToken}&grant_type=refresh_token&client_id=${conf.clientID}&client_secret=${conf.clientSecret}&redirect_uri=${conf.redirect_uri}&scope=guilds%20identify`,\r\n      {headers: {\"Content-Type\": \"application/x-www-form-urlencoded\"}}\r\n    )\r\n    .catch(console.error)\r\n  return res.data\r\n}\r\n\r\nfunction saveTokens(token, refreshToken) {\r\n  Cookie.set(\"token\", token)\r\n  Cookie.set(\"refreshToken\", refreshToken)\r\n}\r\n\r\nfunction deleteTokens() {\r\n  Cookie.remove(\"token\")\r\n  Cookie.remove(\"refreshToken\")\r\n}\r\n\r\nfunction getTokensForBrowser() {\r\n  let token = Cookie.getJSON(\"token\")\r\n  let refreshToken = Cookie.getJSON(\"refreshToken\")\r\n  return {\r\n    token: token,\r\n    refreshToken: refreshToken,\r\n  }\r\n}\r\n\r\nfunction getTokensForServer(req) {\r\n  if (req.headers.cookie) {\r\n    const cookieToken = req.headers.cookie\r\n      .split(\";\")\r\n      .find((c) => c.trim().startsWith(\"token=\"))\r\n    const cookieRefreshToken = req.headers.cookie\r\n      .split(\";\")\r\n      .find((c) => c.trim().startsWith(\"refreshToken=\"))\r\n\r\n    let token = typeof cookieToken === \"string\" && cookieToken.split(\"=\")[1]\r\n    let refreshToken =\r\n      typeof cookieRefreshToken === \"string\" && cookieRefreshToken.split(\"=\")[1]\r\n\r\n    return {\r\n      token: token,\r\n      refreshToken: refreshToken,\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  exchangeToken,\r\n  refreshToken,\r\n  saveTokens,\r\n  deleteTokens,\r\n  getTokensForBrowser,\r\n  getTokensForServer,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}